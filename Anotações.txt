==================================================================================

Gerenciamento de estado

- a context api não era tão boa e segura qto é agora, por isso, 
o redux surgiu;
- a context api não subistitui redux
- a context api serve exclusivamente para compartilhar estados 
entre componentes,
mas esse estado não consegue ser muito complexo

==================================================================================

Ferramentas disponíveis

- context api: usar qdo precisamos compartilhar informações 
simples entre os componentes 
(https://pt-br.reactjs.org/docs/context.html);

- Redux (https://redux.js.org/)

- Mobx (https://mobx.js.org/README.html)

- Recoil: tende a ser um substituto mais simples para o redux 
e mobx. É uma lib recente (https://recoiljs.org/)

- Zustand: outra lib semelhante ao recoil. Tbm é uma lib nova
(https://github.com/pmndrs/zustand/releases)

==================================================================================

Arquitetura Flux

O que é: é uma forma de organizar as informações de estados 
globais da aplicação, ou seja, estados que são compartilhados
em vários componentes;

As ações no reduz são unidirecionais;

==================================================================================

Configurando Store

-Criar o projeto
create-react-app app --template typescript

- Instala as dependências do redux
yarn add redux react-redux

createStore = é chamado uma única vez

yarn add @types/react-redux -D

Provider: provem os valores para todos que estão dentro dele

----

store/index.ts:
const store = createStore(() => "Ana");

Catalog.tsx:
const store = useStore();
console.log(store.getState());

No console:
Ana

----

useSelector:  recebe um fç como parâmentro

const store = useSelector((state) => state); => retorna toda o
estado da aplicação

----

const store = createStore(() => {
  return {
    id: 2,
    name: "Ana",
    email: "ana@gmail.com",
  };
});

const email = useSelector((state) => state.email);
console.log(email);
(vai dar erro de ts, mas apresenta o email no console)

----

==================================================================================

Usando os reducers

Reducer é o ponto central da aplicação no redux;
o reducer é responsavel pelas info que estarão contidas dentro 
do modulo cart

O reducer é um fç que retorna as info contidas dentro do state

rootReducer: para unir vários reducers
==================================================================================

Estado inicial do Reducer

==================================================================================

Criando servidor JSON

Fake API
yarn add json-server -D
no package.json, cria um script pra executar ele

yarn add axios

==================================================================================

Trabalhando com actions

type: é uma string que identifica cada uma das ações
payload: geralmente, são todos os dados que recebemos, no caso 
aqui, o product

==================================================================================

Alterando estado

==================================================================================

Tipagens do Redux

==================================================================================

Utilizando Immer

==================================================================================

Aumentando quantidade

==================================================================================

Debugando com DevTools

==================================================================================

Abstraindo item do catálogo

==================================================================================

Configurando Redux Saga

==================================================================================

Obtendo quantidade do carrinho

==================================================================================

Dividindo as actions

==================================================================================

Finalizando checagem do estoque

==================================================================================

Sinalizando falta de estoque

==================================================================================

Criando Action Types

==================================================================================
